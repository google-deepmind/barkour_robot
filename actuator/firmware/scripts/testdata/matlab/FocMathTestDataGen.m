%
%  This script simulates FOC signals.
%
%  This is used to generate test data for barkour foc_commutation unit tests.
%
%  Test data is generated in output file:
%  barkour/drivers/stm32h7_hal/foc_commutation_test_data.h
%
%  This file is included in the realtime_foc_tests.cc and used in the unit tests
%  for the foc functions.
%

close all;
clear all;

iang = 0:(2*pi/1000):(2 * pi);
ang=iang;

d=zeros(size(ang));
q=ones(size(ang));



%ia =cos(ang);
%ib =cos(ang - 2/3 * pi);
%ic =cos(ang + 2/3 * pi);

function [alpha,beta] = ClarkeTransform( a, b, c )

  oneOverSqrt3 = -1.0 / sqrt(3);

  alpha=a;
  beta= oneOverSqrt3 * (a + b + b);

endfunction

function [a,b,c] = InverseClarkeTransform( alpha, beta)
  sqrt3beta = sqrt(3) * beta;

   a = alpha;
   b = (-alpha - sqrt3beta) * 0.5;
   c = (-alpha + sqrt3beta) * 0.5;

endfunction

function [d,q]=  ParkTransform( alpha,  beta,  angle)

   cos_el_angle = cos(angle);
   sin_el_angle = sin(angle);

   d = sin_el_angle .* alpha + cos_el_angle .* beta;
   q = cos_el_angle .* alpha - sin_el_angle .* beta;

endfunction

function [alpha,beta]  = InverseParkTransform( d,  q,  angle)

   cos_el_angle = cos(angle);
   sin_el_angle = sin(angle);
   alpha = sin_el_angle .* d + cos_el_angle .* q;
   beta = cos_el_angle .* d - sin_el_angle .* q;

endfunction

function [pss,pss_tag] = SampleSelect(va,vb,vc)

  [~,i] = min([va,vb,vc]);

  if(i==1)
        pss_tag="kBC";
  else if (i==2)
        pss_tag="kAC";
     else
        pss_tag="kAB";
     endif
  endif

  pss = i;

endfunction

[alpha,beta] = InverseParkTransform(d,q,ang);
[ia,ib,ic] = InverseClarkeTransform(alpha,beta);

[ialpha,ibeta] = ClarkeTransform(ia,ib,ic);
[id,iq] = ParkTransform(ialpha,ibeta,ang);

figure(1)
plot(ang*180/pi,[ia;ib;ic;ialpha;ibeta;id;iq]);
legend("ia","ib","ic","ialpha","ibeta","id","iq");
xlabel("ang (Deg)")
ylabel("Amps")

[alpha,beta]=InverseParkTransform(d,q,ang);
[a,b,c] = InverseClarkeTransform(alpha,beta);

minphase = min([a;b;c]);
maxphase = max([a;b;c]);

com = (minphase+maxphase)/2;
asv=a-com;
bsv=b-com;
csv=c-com;



figure(2)
plot(ang*180/pi,[asv;bsv;csv;alpha;beta;d;q])
legend("va","vb","vc","valpha","vbeta","vd","vq");
xlabel("ang (Deg)")
ylabel("Volts")

td_fh = fopen("../../barkour/drivers/stm32h7_hal/foc_commutation_test_data.h","w+");

NUM_TESTS=24;

fprintf(td_fh,"//\n#pragma once\n\n//\n// This file is auto generated by the ");
fprintf(td_fh,"matlab/octave script\n");
fprintf(td_fh,"// .../barkour_firmware/scripts/testdata/FocMathTestDataGen.m\n//\n\n");
fprintf(td_fh,"// This file is included in the realtime_foc_tests.cc\n");
fprintf(td_fh,"// and used in the unit tests for the foc functions.\n//\n\n");

fprintf(td_fh,"#define NUM_COM_TESTS %d\n",NUM_TESTS);
fprintf(td_fh,"#define FOC_COM_TEST_DATA_INIT { \\\n");

idx=1;
step=int16(length(ang)/NUM_TESTS);

sense_r = 0.0015;
csa_gain = 20;
adc_ref = 3.3;
num_pole_pairs = 21;
counts_per_turn = 2^16-1;
bus_voltage = 24;

scale= bus_voltage/2;
da = (asv/scale+1)/2;
db = (bsv/scale+1)/2;
dc = (csv/scale+1)/2;

figure(3)
plot(ang*180/pi,100*[da;db;dc]);
i_scale = (2^16-1)*((sense_r * csa_gain)/adc_ref);
i_offset =(2^16-1)/2.0;
legend("da","db","dc");
xlabel("ang (Deg)");
ylabel("Duty %");

pss= 3;

for i = 1:NUM_TESTS;
   if(pss==1)
     i1 = ic(idx);
     i2 = ib(idx);
   endif;

   if(pss==2)
     i1 = ic(idx);
     i2 = ia(idx);
   endif;

   if(pss==3)
     i1 = ia(idx);
     i2 = ib(idx);
   endif;

   phase_offset = 0; % pi/2;

   fprintf(td_fh,"/* %f */ {",ang(idx));
   fprintf(td_fh,"{%lu, %lu, %lu},", ...
           int32(((counts_per_turn)/num_pole_pairs) * mod((ang(idx)+phase_offset),2*pi)/(2 *pi)), ...
           uint32(i1*i_scale+i_offset), uint32(i2*i_scale+i_offset) ...
   );
   [pss,pss_tag]=SampleSelect( da(idx), db(idx), dc(idx));

   scale= bus_voltage/2;


   fprintf(td_fh,"FocInterface::FocState(%f, %f, %f,   %f, %f, %f,   %f, %f,   %f, %f,  %f, PhaseSampleSelection::%s)", ...
       ia(idx), ib(idx), ic(idx), ...
       da(idx),db(idx),dc(idx), ...
       id(idx), iq(idx), ...
       d(idx), q(idx), ...
       mod(ang(idx)+phase_offset,2*pi), ...
       pss_tag ...
   );
   if(i ~= NUM_TESTS)
     fprintf(td_fh,"}, \\\n");
   else
     fprintf(td_fh,"} \\\n");
   endif

   idx = idx+step;

endfor

fprintf(td_fh,"}\n");

fclose(td_fh);

% Print usefull values for other unit tests
[a,b]=ClarkeTransform(1,-.5,-.5)
[a,b]=ClarkeTransform(0,sqrt(3)/2,-sqrt(3)/2)

[a,b,c]=InverseClarkeTransform(1,0)
[a,b,c]=InverseClarkeTransform(0,1)

ang(100)
da(100)
db(100)
dc(100)
